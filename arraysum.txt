--Pause OneDrive On your PC (Avoid Conflicts*)

--Start:
Xilinx Board Part: xc7a200tfbg676-2
Project_name_vivado: arraysum

--Create Block Design:
Add MicroBlaze(32-bit)>RunBlockAutoMation>LocalMemory:128KB>clk_in+clk_out=100MHz>RunConnectionAutomation
Add AXI_BRAM_CTRL_0(BRAM)>RunConnectionAutomation
Add AXI UARTLITE IP>Baud Rate:115200(testbench.vhd written for this baud rate)>RunConnectionAutomation

--Check Address Editor:
--The Microblaze_0/Instruction->Microblaze local memory->128K (My Code Size is small)

----FIX BRAM KB SIZE!-->included:m_axi_gmem
/microblaze_0_local_memory/ilmb_bram_if_cntlr/SLMB==128KB ! ENOUGH!
/microblaze_0_local_memory/dlmb_bram_if_cntlr/SLMB=128KB ! ENOUGH!

--Validate Block Design (No Errors).
--Generate Output Products (Generate Block Design)
--Generate HDL Wrapper + My Wrapper Content:
--Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
--Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
----------------------------------------------------------------------------------
--Tool Version: Vivado v.2023.2 (win64) Build 4029153 Fri Oct 13 20:14:34 MDT 2023
--Date        : Sun Dec 15 14:42:36 2024
--Host        : rev_sharped running 64-bit major release  (build 9200)
--Command     : generate_target design_1_wrapper.bd
--Design      : design_1_wrapper
--Purpose     : IP block netlist
----------------------------------------------------------------------------------
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
library UNISIM;
use UNISIM.VCOMPONENTS.ALL;
entity design_1_wrapper is
  port (
    diff_clock_rtl_0_clk_n : in STD_LOGIC;
    diff_clock_rtl_0_clk_p : in STD_LOGIC;
    reset_rtl_0 : in STD_LOGIC;
    uart_rtl_0_rxd : in STD_LOGIC;
    uart_rtl_0_txd : out STD_LOGIC
  );
end design_1_wrapper;

architecture STRUCTURE of design_1_wrapper is
  component design_1 is
  port (
    diff_clock_rtl_0_clk_n : in STD_LOGIC;
    diff_clock_rtl_0_clk_p : in STD_LOGIC;
    reset_rtl_0 : in STD_LOGIC;
    uart_rtl_0_rxd : in STD_LOGIC;
    uart_rtl_0_txd : out STD_LOGIC
  );
  end component design_1;
begin
design_1_i: component design_1
     port map (
      diff_clock_rtl_0_clk_n => diff_clock_rtl_0_clk_n,
      diff_clock_rtl_0_clk_p => diff_clock_rtl_0_clk_p,
      reset_rtl_0 => reset_rtl_0,
      uart_rtl_0_rxd => uart_rtl_0_rxd,
      uart_rtl_0_txd => uart_rtl_0_txd
    );
end STRUCTURE;

--Export Hardware (.xsa) File//WITHOUT BITSTREAM (SYNTHESIS ONLY)

--VITIS IDE:
--Create Platform>With XSA File>Build Platform
--Create Application>hello_world Example Left Panel
--Modified To Name: Array_sum_sdk
--Array_sum_sdk[Application]>Sources>src>hello_world.c:
#include <stdio.h>                // Standard Input/Output library for printf
#include "platform.h"             // Used for platform initialization and cleanup
#include "xil_printf.h"           // Provides functions for printing via UART
#include "xil_io.h"               // Provides functions for hardware register read/write (BRAM, IP)
#include "xparameters.h"          // Contains base addresses for hardware resources (BRAM, IP)

int main()
{
    init_platform();              // Initializes the platform (e.g., UART, STDIN/STDOUT)

    char buff[11];                // Buffer to store the result as a string (up to 10 characters + null terminator)

    // Define a static array of 9 float values
    static float arr[9] = {1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0};

    // Union for converting between unsigned int and float
    union {
        unsigned int a;           // 32-bit unsigned integer
        float b;                  // Float value
    } itof;

    float sum = 0.0;              // Variable to store the sum of the array elements

    // **Write array values to BRAM and calculate the sum**
    for (int i = 0; i < 9; i++) { 
        itof.b = arr[i];          // Copy the current float element into the union
        // Write the value (converted to unsigned int) to the BRAM address
        Xil_Out32(XPAR_AXI_BRAM_0_BASEADDRESS + (4 * i), itof.a);
        sum += arr[i];            // Calculate the sum of the elements
    }

    itof.b = sum;                 // Store the result (sum) in the union

    //Print the result via UART:
    sprintf(buff, "%f", itof.b);        //Convert the result (float) to a string and store it in buff
    xil_printf("Sum = %s\n\r", buff);   // Print the result string via UART

    //MY_OUTPUT_SIGNAL FROM THIS SIMULATION: charbuffer[1:20] : WROTE AS A STRING AND AFTER SOME SECONDS PRINTED RESULT IN TCL CONSOLE!

    cleanup_platform(); // Cleanup the platform
    return 0;                     
}

--CHECK CORRECT ADDRESSES AND NAMES FROM XPARAMETERS.H IN INCLUDES!

--EXPLANATION  OF FUNCTIONS USED:
1. init_platform(): Initializes hardware peripherals like UART for the application.  
2. cleanup_platform(): Deinitializes platform-specific resources before program exit.  
3. xil_printf(): Prints formatted strings to the console or UART.  
4. Xil_Out32(Address, Data): Writes a 32-bit value to a specified memory-mapped address.  
5. Xil_In32(Address): Reads a 32-bit value from a specified memory-mapped address.  
6. sprintf(buff, "%f", itof.b): Converts a float value into a string for printing.  
7. while (0 == (2 & Xil_In32(...))): Polls the HLS IP's status register until the operation is complete.  
8. XPAR_AXI_BRAM_CTRL_0_S_AXI_BASEADDR: Defines the base address for the BRAM controller.  
9. XPAR_SUM_ARR_0_S_AXI_CONTROL_BASEADDR: Defines the base address for the HLS IP control interface.  
10.union { unsigned int a; float b; } itof: Converts between `float` and `unsigned int` for memory compatibility.


--INCLUDES: xil_io.h,xpseudo_asm.h,xreg_cortexa9.h
*{"C:\Users\znkr_\Downloads\arraysum\platform\microblaze_0\standalone_microblaze_0\bsp\libsrc\standalone\src\arm\cortexa9"}

--INCLUDES: xpseudo_asm_gcc.h
*{"C:\Users\znkr_\Downloads\arraysum\platform\microblaze_0\standalone_microblaze_0\bsp\libsrc\standalone\src\arm\common\gcc"}

--BUILD Application!(Generation .ELF File) 
--Make Sure Exists: Project location --> <Appplication_name.elf> -->My Specified Path: "C:\Users\znkr_\Downloads\arraysum\array_sum_sdk\build\array_sum_sdk.elf"

--Associate .elf file by right-clicking:Simulation Sources:Associate ELF Files.. (sum_arr_sdk.elf) --> "C:\Users\znkr_\Downloads\arraysum\array_sum_sdk\build\array_sum_sdk.elf"
--Simulation Sources Only:ELF File Builed from vitis IDE (C Code)(Array_sum_sdk.elf)
--Design Source No Change!(mb_bootloop_le.elf)
--Properties of ELF File (Check if are all good)

--The testbench has VHDL code for sending and receiving any UART communication and displaying received data on TCL console.
--Right Click Simulation Sources Hierarchy>Add Simulation Source>Right Click testbench.vhd>Set As Top!
--VIVADO_TB(testbench.vhd):
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

use ieee.numeric_std.all;
use std.textio.all;

entity testbench is
end entity testbench;

architecture my_testbench of testbench is
  signal clk   : std_logic := '0';
  signal clk_n   : std_logic := '1';
  signal rst_n : std_logic := '1';
  signal rst : std_logic := '0';
  signal rs232_uart_txd : std_logic := 'Z';
  signal rs232_uart_rxd : std_logic;

component design_1_wrapper is
  port (
    diff_clock_rtl_0_clk_n : in STD_LOGIC;
    diff_clock_rtl_0_clk_p : in STD_LOGIC;
    reset_rtl_0 : in STD_LOGIC;
    uart_rtl_0_rxd : in STD_LOGIC;
    uart_rtl_0_txd : out STD_LOGIC
  );
end component;

  signal character_state : std_logic_vector (2 downto 0) := "000";
  signal counter : std_logic_vector (31 downto 0) := x"00000000";
  signal number_of_bits_received : std_logic_vector (31 downto 0) := x"00000000";
  signal data_received : std_logic_vector (9 downto 0) := "0000000000";
  file output_file_stdout : text; 
  signal charbuffer : String (1 to 20);        
  signal charbuffer_index : integer := 1;
begin
    uut : design_1_wrapper port map (diff_clock_rtl_0_clk_n => clk_n, diff_clock_rtl_0_clk_p => clk, reset_rtl_0 => rst_n,
                                     uart_rtl_0_txd => rs232_uart_txd,
                                     uart_rtl_0_rxd => rs232_uart_rxd);

  -- system input clock = 100 MHz, half-period = 5 ns
  -- UART Baud rate 115200. => 100M/115200 TB-clock-cycles.
  --    (100M/115200) = 868 = 0x364, half/mid = 434 = 0x1B2
  
  clk   <= not clk after 5 ns ;			
  clk_n <= not clk;

  process
  begin
    file_open(output_file_stdout, "STD_OUTPUT", write_mode);
    rst_n <= '0';
    rst <= '1';
    wait for 80 ns;
    rst_n <= '1';
    rst <= '0';
    wait;
  end process;



  process (clk)
    variable line1 : line;
  begin
    if rising_edge (clk) then
        if '1' = rst_n then
        counter <= std_logic_vector (unsigned (counter) + x"00000001");
        case character_state is
            when "000" => 
                if '0' = rs232_uart_txd then
                    character_state <= "001"; -- start bit '0' received.
                    counter <= x"00000000";
                end if;
            when "001" => -- start bit clock cycles
                if counter = x"000001B2" then 
                    character_state <= "010"; -- reached middle of start bit.
                    counter <= x"00000000";
                end if;
            when "010" => -- receiving characters
                if counter = x"00000364" then -- goto next character
                    data_received(9) <= rs232_uart_txd;
                    data_received(8 downto 0) <= data_received(9 downto 1);
                    counter <= x"00000000";
                    if number_of_bits_received = x"00000007" then
                        number_of_bits_received <= x"00000000";
                        character_state <= "011";
                    else
                        number_of_bits_received <= std_logic_vector (unsigned (number_of_bits_received) + x"00000001");
                    end if;
                end if;
            when "011" =>
                if counter = x"00000364" then -- middle of stop character
                    -- report "received " & integer'image (to_integer (unsigned (data_received(9 downto 2))));
                    -- write (line1, character'val(to_integer(unsigned(data_received(9 downto 2)))));
                    -- writeline (output_file_stdout, line1);
                    if (charbuffer_index = 19) then         
                        charbuffer (1) <= character'val(to_integer(unsigned(data_received(9 downto 2))));
                        charbuffer_index <= 2;
                        write (line1, charbuffer, left);
                        writeline (output_file_stdout, line1);
                    elsif (10 = to_integer(unsigned(data_received(9 downto 2)))) then
                        charbuffer_index <= 1;
                        write (line1, charbuffer, left);
                        writeline (output_file_stdout, line1);
                    else
                        charbuffer(charbuffer_index) <= character'val(to_integer(unsigned(data_received(9 downto 2))));
                        charbuffer_index <= charbuffer_index + 1;
                    end if;
                    character_state <= "000";
                    counter <= x"00000000";
                end if;
            when others =>
                counter <= x"00000000";
                data_received <= "0000000000";
                number_of_bits_received <= x"00000000";
                character_state <= "000";
        end case;
        end if;
    end if;
  end process;

end architecture my_testbench;


--RUN Behavioral_Simulation {TCL Console: launch_simulation}


--ADDED:{UART}:{Exists By Default}:
rs232_uart_txd
rs232_uart_rxd


**OBSERVE THE RESULT:{Sum = 45.000000}:
--Run All (F3) {TCL Console: run all}:
#charbuffer[1:20] --WaveForm Signal!
#TCL Console 